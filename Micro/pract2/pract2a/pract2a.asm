 ;********** CABECERA ***********

;Nombres: Oscar Garcia de Lara Parreño y Alba de Castro Martin
;Pareja: 6

;**************************************************


; DEFINICION DEL SEGMENTO DE DATOS
DATOS SEGMENT
A DB 10,0,0,0,10,0,0,0,10;Creas un array de 9 casillas de tamaño de 1Byte inicializado a 0, que para nosotros sera una matriz cuadrada de tam 3
B DW 0FFFH;RESULTADO DETERMINANTE
PEDIR_DATOS DB "INTRODUCE UN NUMERO PARA LA MATRIZ $"
ERROR DB "NO HA INTRODUCIDO UN NUMERO O ES DEMASIADO GRANDE, EJECUTE OTRA VEZ EL PROGRAMA$"
MENOS DB "- $"
BARRA2 DB "|",0Dh,0Ah,24h,"$";BARRA CON SALTO DE LINEA
COMA DB ", $"
CLR_PANT 	DB 	1BH,"[2","J$" ;LIMPIA PANTALLA
IGUAL DB " = $"
BARRA DB "|$"
CENTENA DB 0
DECENA DB 0
UNIDAD DB 0
D_MAL DB 0 ;PARA COMPROBAR SI NO SE METE UN NUMERO
TEMP DB 10 dup (0) ;BUFFER TEMPORAL
RESUL DB 10 dup(0);DONDE ALMACENA EL RESULTADO
DATOS ENDS 

;**************************************************

; DEFINICION DEL SEGMENTO DE PILA
PILA SEGMENT STACK "STACK"
	DB 40H DUP (0) 
PILA ENDS
;**************************************************

; DEFINICION DEL SEGMENTO EXTRA
EXTRA SEGMENT
 
EXTRA ENDS
;**************************************************

; DEFINICION DEL SEGMENTO DE CODIGO
CODE SEGMENT
ASSUME CS: CODE, DS: DATOS, ES: EXTRA, SS: PILA
; COMIENZO DEL PROCEDIMIENTO PRINCIPAL
INICIO PROC
; INICIALIZA LOS REGISTROS DE SEGMENTO CON SU VALOR
	MOV AX, DATOS
	MOV DS, AX
	MOV AX, PILA
	MOV SS, AX
	MOV AX, EXTRA
	MOV ES, AX
	MOV SP, 64 ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO
; FIN DE LAS INICIALIZACIONES
	; COMIENZO DEL PROGRAMA
	
	CALL captura
	CALL determinante
	CALL imprimirMatriz
	MOV AX, 4C00H
	INT 21H
INICIO ENDP; FIN DE LA RUTINA PRINCIPAL	
captura proc
	MOV CX, 0000H
coger:
	MOV D_MAL, 00H
	MOV AH,09H ;BORRA LA PANTALLA
	MOV DX, OFFSET CLR_PANT
	INT 21H
	MOV DX,OFFSET PEDIR_DATOS		;ESCRIBE PEDIR DATOS
	INT 21H
	MOV AH,0AH			;ALMACENA EL NUMERO DE TECLADO
	MOV DX,OFFSET TEMP
	MOV TEMP[0], 5;SE ALMACENA TEMPORALMENTE EN TEMP
	INT 21H
	MOV SI, OFFSET TEMP[2];EL NUMERO EMPIEZA EN LA POSICION 2 DE LA ARRAY
	MOV AL, [SI]
	CMP	AL,'-'; MIRAMOS SI METIO UN MENOS
	JNE no_neg
	MOV SI, OFFSET TEMP[3];AL SER UN MENOS LO PRIMERO PUES COGEMOS LA SIGUIENT POSICION
	CALL atoi
	CMP BL,7Eh ;COMPROBAMOS QUE NO SE PASE DE TAMAÑO
	JA fallo
	neg Bl;HACEMOS EL COMPLEMENTO A 2 PARA GUARDARLO NEGATIVO
	JMP compr
no_neg:	
	CALL atoi
	CMP BL,7Eh ;COMPROBAMOS QUE NO SE PASE DE TAMAÑO
	JA fallo
compr:
	CMP D_MAL,00H;ESTA COMPROBACION SE INC EN EL BUCLE DE ATOI SI NO LO HACE ES QUE METIO UNA LETRA Y SALTA ERROR
	JE fallo
	
	MOV A[DI],BL;GUARDAMOS EN LA POSICION INDICADA
	INC DI
	INC CX
	CMP CX, 9 ;CX ES EL CONTADOR DEL BUCLE
	JNZ coger
	RET
	
fallo:	;EN CASO DE METER MAL ALGUN NUMERO MOSTRAREMOS ERROR Y PARAMOS EL PROGRAMA
	MOV AH,9	; BORRA LA PANTALLA
	MOV DX, OFFSET CLR_PANT
	INT 21H
	MOV DX,OFFSET ERROR		;ESCRIBE FRASE DE ERROR
	INT 21H
	mov ah, 00h 
	int 16h ;PARAMOS PARA QUE MUESTRE LA FRASE
	MOV AX, 4C00H
	INT 21H
captura endp

atoi proc
	MOV BX, 0000h   ;BX = 0
	
	push CX ;GUARDO CX PARA NO CARGARME EL CONTADOR
	MOV AX, 0000h
atoi_1:
  lodsb       ;CARGA EN AL LO QUE APUNTA SI E INCREMENTA SI
              
  cmp al,'0'  
  jb noascii  ;CUANDO NO ES EL ASCII DE UN NUMERO SALE
  cmp al,'9'
  ja noascii  ;CUANDO NO ES EL ASCII DE UN NUMERO SALE

  INC D_MAL ;CONTROL DE ERROR 
  sub al,30h  ;RESTAMOS 30H PARA CONSEGUIR EL NUMERO DEL ASCII
  cbw         ;BYTE A WORD
  push ax
  mov ax,bx   ;BX CONSEGUIRA EL VALOR FINAL
  mov cx,10
  mul cx      ;AX=AX*10
  mov bx,ax
  pop ax
  add bx,ax
  jmp atoi_1  ;EL BUCLE SE REPITE HASTA QUE ENCUNTRE UN NUMERO NO ASCII
  noascii:
  pop CX
  ret         ;RETORNO EN BX
atoi endp

determinante proc
	MOV AX, 0000H
	MOV BX, 0000H
	MOV DX, 0000H
	MOV DI,0000H
	MOV CX,0000h ; INICIALIZO TODO A 0
	
	MOV DI, OFFSET A[0] ;COJO EL OFFSET EN DI
	MOV AL, [DI];LE ASIGNO LA DIRECION APUNTADA EN DI A AL
	MOV DI, OFFSET A[4]
	MOV CL,[DI]
	IMUL CL ;MULTIPLICO AL POR CL
	MOV DI, OFFSET A[8]
	MOV CL,[DI]
	IMUL CL ;MULTIPLICO AL POR CL
	MOV BX, AX ;GUARDO EL PRIMER VALOR DE LA MULTIPLICACION EN BX 
	MOV AX, 0000H; MISMO QUE LO ANTERIOR
	MOV CX, 0000h
	MOV DI, OFFSET A[3] 
	MOV AL, [DI]
	MOV DI, OFFSET A[7]
	MOV CL,[DI]
	IMUL CL
	MOV DI, OFFSET A[2]
	MOV CL,[DI]
	IMUL CL
	ADD BX,AX;SUMO LO QUE ACABO DE CONSEGUIR A LO DE BX
	MOV AX, 0000H
	MOV CX, 0000h
	MOV DI, OFFSET A[1] ;IGUAL QUE LO ANTERIOR
	MOV AL, [DI]
	MOV DI, OFFSET A[5]
	MOV CL,[DI]
	IMUL CL
	MOV DI, OFFSET A[6]
	MOV CL,[DI]
	IMUL CL
	ADD BX,AX;SUMO LO QUE ACABO DE CONSEGUIR A LO DE BX 
	
	MOV AX, 0000H;HAGO LO MISMO PERO LA SUMA LA GUARDO EN DX
	MOV CX, 0000h
	MOV DI, OFFSET A[2] 
	MOV AL, [DI]
	MOV DI, OFFSET A[6]
	MOV CL,[DI]
	IMUL CL
	MOV DI, OFFSET A[4]
	MOV CL,[DI]
	IMUL CL
	MOV DX, AX
	MOV AX, 0000H
	MOV CX, 0000h
	MOV DI, OFFSET A[0] 
	MOV AL, [DI]
	MOV DI, OFFSET A[7]
	MOV CL,[DI]
	IMUL CL
	MOV DI, OFFSET A[5]
	MOV CL,[DI]
	IMUL CL
	ADD DX, AX
	MOV AX, 0000H
	MOV CX, 0000h
	MOV DI, OFFSET A[1] 
	MOV AL, [DI]
	MOV DI, OFFSET A[3]
	MOV CL,[DI]
	IMUL CL
	MOV DI, OFFSET A[8]
	MOV CL,[DI]
	IMUL CL
	ADD DX, AX

	SUB BX,DX; RESTO DX A BX PARA QUE ME DE EL VALOR DEL DETERMIANTE
	MOV B, BX;LO GUARDO EN B
	RET
determinante endp

imprimirMatriz proc
	MOV CX, 0000H
	MOV DX, 0000h
	MOV SI, 0000H
	MOV AH,9	; BORRA LA PANTALLA
	MOV DX, OFFSET CLR_PANT
	INT 21H
	MOV AH,9	; PONE LA BARRA INICIAL
	MOV DX, OFFSET BARRA
	INT 21H
	
bucle:	
	MOV BX, CX;MUEVO EL CONTADOR A BX YA QUE LO NECESITO PARA ACCEDER A LA POSICION DE A EN IMPRIMIR
	CALL imprimir
	INC CX
	CMP CX, 3
	JNZ bucle;PRIMERA FILA
	
	MOV AH,9	; PONE LA BARRA FINAL Y HACE UN SALTO DE LINEA
	MOV DX, OFFSET BARRA2
	INT 21H
	
	MOV AH,9	; PONE LA BARRA INICIAL
	MOV DX, OFFSET BARRA
	INT 21H
bucle1:
	MOV BX, CX;MUEVO EL CONTADOR A BX YA QUE LO NECESITO PARA ACCEDER A LA POSICION DE A EN IMPRIMIR
	CALL imprimir
	INC CX
	CMP CX, 6
	JNZ bucle1;SEGUNDA FILA
	
	MOV AH,9	; PONE LA BARRA FINAL Y HACE UN SALTO DE LINEA
	MOV DX, OFFSET BARRA2
	INT 21H
	
	MOV AH,9	; PONE LA BARRA INICIAL
	MOV DX, OFFSET BARRA
	INT 21H
	
bucle2:	
	MOV BX, CX;MUEVO EL CONTADOR A BX YA QUE LO NECESITO PARA ACCEDER A LA POSICION DE A EN IMPRIMIR
	CALL imprimir
	INC CX
	CMP CX, 9
	JNZ bucle2;TERCERA FILA
	
	MOV AH,9	; PONE LA BARRA FINAL, ESTA SIN SALTO DE LINEA
	MOV DX, OFFSET BARRA
	INT 21H	
	
	MOV AH,9			
	MOV DX, OFFSET IGUAL ;IMPRIME EL IGUAL
	INT 21H
	
			
	CALL imprimirDeterminante ;IMPRIME EL RESULTADO DETERMINANTE

	mov ah, 0 
	int 16h ;LO MUESTRO POR PANTALLA
	RET
imprimirMatriz endp
imprimir proc
	MOV AX, 0000H
	MOV DI, 0000h
	MOV BL,OFFSET A[SI+BX] ;CARGO EL OFFSET EN BL
	MOV AL, BL
	push CX;GUARDO EL CONTADOR
	MOV CX, 000Ah;LE ASIGNO 10 PARA LA DIVISION
	CMP AL,00h;EN CASO DE SER UN NUMERO NEGATIVO SALTA
	JS negativo
	
DIV0A:
	DIV CL
	MOV RESUL[DI], AH;GUARDO EN RESULTADO EL RESTO Y SIGO DIVIDIENDO EL COCIENTE
	MOV AH,00H
	INC DI
	CMP AL,00H
	JNE DIV0A;CUANDO EL COCIENTE SEA 0 SALE
	
	MOV ax,0000H
	MOV AH,02H
IMPRI:	
	DEC DI;DECREMENTO ANTES PARA REAJUSTARLO
	MOV DL, RESUL[DI]
	ADD DL,30H;LO PASO A ASCII
	INT 21h
	CMP DI, 00h	
	JNE IMPRI;CUANDO DI SEA 0 SE HA TERMINADO EL NUMERO
	JMP pcoma
	
pcoma:
	pop CX;RECUPERO EL CONTADOR Y SEGUN SI EL VALOR CORRESPONDE
	CMP CX,2;A FINAL DE FILA EVITA IMPRIMIR LA COMA
	JE no_coma
	CMP CX,5
	JE no_coma
	CMP CX,8
	JE no_coma
	mov ah,09h			;IMPRIME LA COMA
	MOV DX, offset COMA
	INT 21H
no_coma:
	RET
negativo:
	push ax;GUARDO AX
	mov ah,09h			;IMPRIME MENOS
	MOV DX, offset MENOS
	INT 21H
	pop ax; LA RECUPERO Y A AL LE HAGO EL COMPLEMENTO A 2 PARA HAYAR SU POSITIVO Y PODER IMPRIMIRLO
	neg al
	JMP DIV0A
	
imprimir endp
imprimirDeterminante proc
	
	MOV AH,00h	
	MOV BX, 0000h
	MOV CX,000AH
	MOV DI, 0000h
	MOV BX, OFFSET B ; SU PROCESO ES SIMILAR A LA FUNCION IMPRIMIR PERO CON EL VALOR
	MOV AX, [BX];DEL DETERMINANTE Y NO TIENE TAMPOCO LAS COMAS
	CMP AX,0000h
	JS negativoD
	
DIV10:
	DIV CL
	MOV RESUL[DI], AH
	MOV AH,00H
	INC DI
	CMP AL,00H
	JNE DIV10
	
	MOV ax,0000H
	MOV AH,02H
IMPR:	
	DEC DI
	MOV DL, RESUL[DI]
	ADD DL,30H
	INT 21h
	CMP DI, 00h	
	JNE IMPR

	RET
negativoD:
	push ax
	mov ah,09h			;IMPRIME MENOS
	MOV DX, offset MENOS
	INT 21H
	pop ax
	neg ax
	JMP DIV10
	
	
imprimirDeterminante endp	

; FIN DEL SEGMENTO DE CODIGO
CODE ENDS
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION
END INICIO 